# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import streamlit as st

# Th∆∞ vi·ªán thao t√°c tr√™n t·∫≠p d·ªØ li·ªáu
import pandas as pd
import numpy as np 
pd.set_option('mode.chained_assignment', None)
from datetime import time, datetime

# Th∆∞ vi·ªán tr·ª±c quan plotly
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go

st.set_page_config(
    page_title="MainData",
    page_icon='üìä',
)

# Share ti·∫øn tr√¨nh
if "df_credits" or "df_titles" not in st.sesstion_state:
    st.session_state.df_credits = None
    st.session_state.df_titles = None

# L·∫•y v√† l√†m s·∫°ch d·ªØ li·ªáu
def loadDataCredits():
    df_netflix_credits = pd.read_csv('../data/netflix/credits.csv')
    df_amazon_credits = pd.read_csv('../data/amazon/credits.csv')
    df_hbo_credits = pd.read_csv('../data/hbo/credits.csv')

    df_credits_raw = pd.concat([df_amazon_credits, df_hbo_credits, df_netflix_credits], axis=0)

    df_credits = df_credits_raw.drop_duplicates()
    df_credits.drop('person_id', inplace=True, axis=1, errors='ignore')
    df_credits['character'] = df_credits['character'].fillna('None')

    return df_credits

def loadDataTitles():
    df_amazon_titles = pd.read_csv('../data/amazon/titles.csv')
    df_hbo_titles = pd.read_csv('../data/hbo/titles.csv')
    df_netflix_titles = pd.read_csv('../data/netflix/titles.csv')
    df_titles_raw = pd.concat([df_amazon_titles, df_hbo_titles, df_netflix_titles], axis=0)
    df_titles = df_titles_raw.drop_duplicates()

    df_titles['release_year'] = pd.to_datetime(df_titles['release_year'], format="%Y").dt.year

    df_titles.drop('description', inplace=True, axis=1)

    df_titles['age_certification'].fillna('NONE', inplace=True)
    df_titles['production_countries'] = df_titles['production_countries'].str.replace('[', '', regex=True)\
                                    .str.replace("'", '', regex=True)\
                                    .str.replace(']', '', regex=True)

    df_titles['main_production_countries'] = df_titles['production_countries'].str.split(',').str[0]

    df_titles['genres'] = df_titles['genres'].str.replace('[', '', regex=True)\
                                        .str.replace("'", '', regex=True)\
                                        .str.replace(']', '', regex=True)
                                        
    df_titles['main_genre'] = df_titles['genres'].str.split(', ').str[0]
    df_titles['seasons'] = df_titles['seasons'].fillna(0) 

    return df_titles

# Code c√°c dataframe
df_credits = loadDataCredits()
df_titles = loadDataTitles()

# ------------------------------- FRAME 1 
st.header("üìä:red[TRANG D·ªÆ LI·ªÜU]")
st.sidebar.markdown("# üìä:red[TRANG D·ªÆ LI·ªÜU]")

caption = "Giao di·ªán c·ªßa website ƒë∆∞·ª£c x√¢y d·ª±ng d·ª±a tr√™n module Streamlit, do nh√≥m 1 c·ªßa m√¥n Nh·∫≠p m√¥n l·∫≠p tr√¨nh cho khoa h·ªçc d·ªØ li·ªáu th·ª±c hi·ªán. \
            Website g·ªìm c√≥ x trang ch√≠nh, c√≥ c√°c t√≠nh nƒÉng nh∆∞ l√†:"
st.caption(caption, unsafe_allow_html = False)

st.markdown('<h3 style="text-align: center;"> üé≠ 1. D·ªÆ LI·ªÜU C·ª¶A CREDITS </p>', unsafe_allow_html=True)
st.caption("D·ªØ li·ªáu hi·ªán th√¥ng tin di·ªÖn vi√™n, ƒë·∫°o di·ªÖn v√† c√°c nh√¢n v·∫≠t h·ªç ƒë√£ ƒë√≥ng.", unsafe_allow_html=False)
st.dataframe(df_credits, use_container_width=True)

# -----------------
st.markdown("---")
st.markdown(":green[**T√ÅC V·ª§ 1**: Tra c·ª©u t√™n di·ªÖn vi√™n, ƒë·∫°o di·ªÖn]")

tit = st.text_input('Nh·∫≠p t√™n di·ªÖn vi√™n/ƒë·∫°o di·ªÖn')
st.write('Sau ƒë√¢y l√† c√°c k·∫øt qu·∫£ c·ªßa di·ªÖn vi√™n/ƒë·∫°o di·ªÖn: ', tit)

if tit == '':
    pass
else:
    result_df = df_credits[df_credits['name'].str.contains(tit)]
    st.dataframe(result_df, use_container_width=True)

# ------------------
st.markdown("---")
st.markdown(":green[**T√ÅC V·ª§ 2**: S·∫Øp x·∫øp l·∫°i th√¥ng tin d·ª±a tr√™n vai tr√≤ ƒë·∫°o di·ªÖn/di·ªÖn vi√™n.]")

option = st.selectbox(
    'Xin h√£y ch·ªçn vai tr√≤',
     ['DI·ªÑN VI√äN', 'ƒê·∫†O DI·ªÑN'])

if option == "DI·ªÑN VI√äN":
    df_actor = df_credits[df_credits['role'] == "ACTOR"]
    st.dataframe(df_actor, use_container_width=True)
else: 
    df_director = df_credits[df_credits['role'] == "DIRECTOR"]
    st.dataframe(df_director, use_container_width=True)
# -----------------
st.markdown("---")
st.markdown(":green[**T√ÅC V·ª§ 3**: Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ª∑ l·ªá gi·ªØa di·ªÖn vi√™n v√† ƒë·∫°o di·ªÖn tr√™n t·ªïng s·ªë d·ªØ li·ªáu.]")

pro_df = df_credits['role'].value_counts().rename(index='SL')

labels_dv_dd = ['Di·ªÖn vi√™n', 'ƒê·∫°o di·ªÖn']
fig = px.pie(pro_df, values = "SL", names=labels_dv_dd, title='Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ª∑ l·ªá di·ªÖn vi√™n/ƒë·∫°o di·ªÖn.')
st.plotly_chart(fig, theme=None, use_container_width=True)

# ---------------------------------------------------------------------------------------------------

st.markdown('<h3 style="text-align: center;"> üé¨ 2. D·ªÆ LI·ªÜU C·ª¶A TITLES </p>', unsafe_allow_html=True)
st.caption("D·ªØ li·ªáu hi·ªán th√¥ng tin chi ti·∫øt c·ªßa c√°c lo·∫°i phim tr√™n 3 n·ªÅn t·∫£ng ph√¢n ph·ªëi phim l·ªõn nh∆∞ l√† Amazon, Netflix, HBO.", unsafe_allow_html=False)
st.dataframe(df_titles, use_container_width=True)


st.markdown("---")
st.markdown(":green[**T√ÅC V·ª§ 1**: Ph√¢n ph·ªëi c√°c d·ªØ li·ªáu thu·ªôc t√≠nh s·ªë]")

# ----X·ª¨ L√ù THU·ªòC T√çNH S·ªê ------
def missing_ratio(c):
    return c.isnull().sum() / c.__len__() * 100

def lower_quantile(column):
    return column.quantile(q = 0.25)

def upper_quantile(column):
    return column.quantile(q = 0.75)

def mean(column):
    return column.mean()

def median(column):
    return column.median()

# ----L·∫§Y C·ªòT S·ªê V√Ä T√çNH ------
plotThis = df_titles[df_titles.describe().columns].agg([missing_ratio, min, lower_quantile,  
                                                    median, upper_quantile, max, mean]).round(1)

tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs(["NƒÉm ph√°t h√†nh", "Th·ªùi l∆∞·ª£ng", "S·ªë m√πa", "ƒêi·ªÉm IMDB", 
                                                    "S·ªë ƒë√°nh gi√° IMDB", "ƒê·ªô ph·ªï bi·∫øn TMDB", "ƒêi·ªÉm TMDB"])

labelsBarChart = ['Missing ratio', 'Min', 'Lower quantile', 'Median', 'Upper quantile', 'Max', 'Mean']

with tab1:
    fig1 = px.bar(plotThis, x='release_year', y = labelsBarChart, title='Ph√¢n ph·ªëi thu·ªôc t√≠nh c·ªßa c·ªôt nƒÉm ph√°t h√†nh (Release year)',
                text=plotThis['release_year'].iloc[:])
    fig1 = fig1.update_layout(xaxis_title='Year')
    st.plotly_chart(fig1, theme=None, use_container_width=True)

with tab2:
    fig1 = px.bar(plotThis, x='runtime', y = labelsBarChart, title='Ph√¢n ph·ªëi thu·ªôc t√≠nh c·ªßa c·ªôt th·ªùi l∆∞·ª£ng (Runtime)',
                text=plotThis['runtime'].iloc[:])
    fig1 = fig1.update_layout(xaxis_title='runtime')
    st.plotly_chart(fig1, theme=None, use_container_width=True)

with tab3:
    fig1 = px.bar(plotThis, x='seasons', y = labelsBarChart, title='Ph√¢n ph·ªëi thu·ªôc t√≠nh c·ªßa c·ªôt s·ªë m√πa (Seasons)',
                text=plotThis['seasons'].iloc[:])
    fig1 = fig1.update_layout(xaxis_title='seasons')
    st.plotly_chart(fig1, theme=None, use_container_width=True)

with tab4:
    fig1 = px.bar(plotThis, x='imdb_score', y = labelsBarChart, title='Ph√¢n ph·ªëi thu·ªôc t√≠nh c·ªßa ƒëi·ªÉm IMDB (IMDB score)',
                text=plotThis['imdb_score'].iloc[:])
    fig1 = fig1.update_layout(xaxis_title='imdb_score')
    st.plotly_chart(fig1, theme=None, use_container_width=True)

with tab5:
    fig1 = px.bar(plotThis, x='imdb_votes', y = labelsBarChart, title='Ph√¢n ph·ªëi thu·ªôc t√≠nh c·ªßa ƒëi·ªÉm ƒë√°nh gi√° IMDB (IMDB votes)',
                text=plotThis['imdb_votes'].iloc[:])
    fig1 = fig1.update_layout(xaxis_title='imdb_votes')
    st.plotly_chart(fig1, theme=None, use_container_width=True)

with tab6:
    fig1 = px.bar(plotThis, x='tmdb_popularity', y = labelsBarChart, title='Ph√¢n ph·ªëi thu·ªôc t√≠nh ƒë·ªô ph·ªï bi·∫øn IMDB (IMDB popularity)',
                text=plotThis['tmdb_popularity'].iloc[:])
    fig1 = fig1.update_layout(xaxis_title='tmdb_popularity')
    st.plotly_chart(fig1, theme=None, use_container_width=True)

with tab7:
    fig1 = px.bar(plotThis, x='tmdb_score', y = labelsBarChart, title='Ph√¢n ph·ªëi thu·ªôc t√≠nh ƒëi·ªÉm TMDB (TMDB Score)',
                text=plotThis['tmdb_score'].iloc[:])
    fig1 = fig1.update_layout(xaxis_title='tmdb_score')
    st.plotly_chart(fig1, theme=None, use_container_width=True)


st.markdown("---")
st.markdown(":green[**T√ÅC V·ª§ 2**: Tr·ª±c quan t·ª∑ l·ªá ph·∫ßn trƒÉm c·ªßa show/movie tr√™n t·ªïng d·ªØ li·ªáu]")

pro_df_title = df_titles['type'].value_counts().rename(index='SL')

labels = ['MOVIE', 'SHOW']
fig2 = px.pie(pro_df_title, values = "SL", names=labels, title='Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ª∑ l·ªá show/phim.')
st.plotly_chart(fig2, theme=None, use_container_width=True)


st.markdown("---")
st.markdown(":green[**T√ÅC V·ª§ 3**: Tr·ª±c quan l∆∞·ª£ng phim qua c√°c nƒÉm]")
num_of_movies_by_year = df_titles['release_year'].value_counts().sort_index().rename(index="S·ªë l∆∞·ª£ng phim")
fig3 = px.bar(num_of_movies_by_year)
fig3 = fig3.update_layout(xaxis_title='NƒÉm ph√°t h√†nh')
st.plotly_chart(fig3, theme=None, use_container_width=True)

st.markdown("---")
st.markdown(":green[**T√ÅC V·ª§ 3**: Tr·ª±c quan ph·∫ßn trƒÉm c√°c nh√£n ƒë·ªô tu·ªïi ƒë∆∞·ª£c g√°n cho phim]")
age_cert = df_titles['age_certification'].value_counts()

labelFig4 = ['NONE', 'R', 'PG-13', 'TV-MA', 'PG', 'TV-14', 'G', 'TV-PG', 'TV-Y7', 'TV-Y', 'TV-G', 'NC-17']

fig4 = px.pie(age_cert, values = "age_certification", names=labelFig4)
st.plotly_chart(fig4, theme=None, use_container_width=True)


st.markdown("---")
st.markdown(":green[**T√ÅC V·ª§ 4**: Xem n qu·ªëc gia l·ªçt top s·∫£n xu·∫•t nhi·ªÅu phim nh·∫•t]")
top_production_countries = df_titles['production_countries'].str.split(', ').explode().value_counts().drop('')
num_production_countries = df_titles['production_countries'].str.split(',').explode().nunique()

top_n = st.text_input('Nh·∫≠p s·ªë n (top) m√† b·∫°n mu·ªën ki·∫øm tra')
st.write('Sau ƒë√¢y l√† c√°c k·∫øt qu·∫£ top: ', top_n)

if top_n == '':
    pass
else:
    top_frame = top_production_countries.nlargest(int(top_n));
    st.dataframe(top_frame, use_container_width=True)


st.session_state.df_credits = df_credits
st.session_state.df_titles = df_titles