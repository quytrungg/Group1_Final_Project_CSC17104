
import streamlit as st

# Th∆∞ vi·ªán thao t√°c tr√™n t·∫≠p d·ªØ li·ªáu
import pandas as pd
import numpy as np 
pd.set_option('mode.chained_assignment', None)
from datetime import time, datetime
from sklearn.cluster import KMeans
from sklearn import metrics
import matplotlib.pyplot as plt
from datetime import datetime

# Th∆∞ vi·ªán tr·ª±c quan plotly
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go
st.set_option('deprecation.showPyplotGlobalUse', False)
# ---------------------- FRAME 1 -----------------------
df_titles = st.session_state.df_titles
df_credits = st.session_state.df_credits

st.header("üéûÔ∏è:green[TRANG KHUY·∫æN NGH·ªä PHIM]")
st.sidebar.markdown("# üéûÔ∏è:red[TRANG KHUY·∫æN NGH·ªä PHIM]")

caption = "Giao di·ªán m√¥ t·∫£ thu·∫≠t to√°n khuy·∫øn ngh·ªã phim cho ng∆∞·ªùi d√πng b·∫±ng c√°ch s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p gom c·ª•m K-Means:"
st.caption(caption, unsafe_allow_html = False)

st.markdown("### 1. H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:")
caption = "H·ªá th·ªëng khuy·∫øn ngh·ªã ho·∫°t ƒë·ªông d·ª±a tr√™n vi·ªác gom c·ª•m d·ªØ li·ªáu sao cho ·ª©ng v·ªõi c√°c thu·ªôc t√≠nh t√≠nh ch·∫•t (type - show hay movie), nƒÉm ph√°t h√†nh (release year), ph√¢n lo·∫°i tu·ªïi (age certification), qu·ªëc gia s·∫£n xu·∫•t ch√≠nh (main production countries) v√† th·ªÉ lo·∫°i phim."
st.write(caption)

st.markdown("#### 2. B∆∞·ªõc 1: V√≤ng l·∫∑p ch·ªçn n (s·ªë l∆∞·ª£ng c·ª•m h·ª£p l√Ω) nh·∫•t cho m√¥ h√¨nh.")
caption = "ƒê·∫ßu ti√™n, ta th·ª±c hi·ªán ch·ªçn kho·∫£ng c·ª•m n ƒë·ªÉ cho ra c·ª•m c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t. Sau khi th·ª±c hi·ªán xong, m·ªôt bi·ªÉu ƒë·ªì th·ªÉ hi·ªán ch·ªâ s·ªë inertia (ch·ªâ s·ªë t·ªïng b√¨nh ph∆∞∆°ng kho·∫£ng c√°ch gi·ªØa c√°c ƒëi·ªÉm ƒë·∫øn centroid c·ªßa n√≥). Sau khi xem bi·ªÉu ƒë·ªì, ta c√≥ th·ªÉ ch·ªçn ƒë∆∞·ª£c s·ªë c·ª•m n ph√π h·ª£p cho m√¥ h√¨nh."
recommend_df = df_titles[['type', 'release_year', 'age_certification', 'main_production_countries', 'main_genre']]

genres_dict = {g: 0 for g in recommend_df['main_genre'].unique()}
countries_dict = {g: 0 for g in recommend_df['main_production_countries'].unique()}
age_dict = {g: 0 for g in recommend_df['age_certification'].unique()}
type_dict = {'SHOW': 0, 'MOVIE': 1}

idx = 0
for i,_ in genres_dict.items():
    genres_dict[i] = idx
    idx += 1

idx = 0
for i,_ in countries_dict.items():
    countries_dict[i] = idx
    idx += 1

idx = 0
for i,_ in countries_dict.items():
    age_dict[i] = idx
    idx += 1

recommend_df['main_genre'] = recommend_df['main_genre'].map(genres_dict)
recommend_df['main_production_countries'] = recommend_df['main_production_countries'].map(countries_dict)
recommend_df['age_certification'] = recommend_df['age_certification'].map(age_dict)
recommend_df['type'] = recommend_df['type'].map(type_dict)
recommend_np = recommend_df.to_numpy()

sum_distances = []

# Range values 
values_range_kmean = st.slider(
    'Ch·ªçn kho·∫£ng gi√° tr·ªã c·∫ßn xem x√©t kho·∫£ng k-n',
    1, 14, (1, 14))
st.write('Values:', values_range_kmean)

K = range(values_range_kmean[0], values_range_kmean[1])

for k in K:
  k_mean = KMeans(n_clusters=k)
  k_mean.fit(recommend_np)
  sum_distances.append(k_mean.inertia_)

# plt.plot(K, sum_distances, 'bx-') 
# plt.show() 

fig1 = px.line(K, sum_distances, markers=True)
fig1 = fig1.update_layout(xaxis_title='Inerita', yaxis_title='S·ªë c·ª•m')
st.plotly_chart(fig1, theme=None, use_container_width=True)

# ------ CH·ªåN C·ª§M
st.markdown("#### 3. B∆∞·ªõc 2: Ch·ªçn s·ªë n t·ªët t·ª´ b∆∞·ªõc 1")
n_cluster_choice = st.text_input('Nh·∫≠p v√†o c·ª•m n t·ªët nh·∫•t')

if n_cluster_choice == '':
    pass
else:
    n_cluster_choice = int(n_cluster_choice)
    k_mean = KMeans(n_clusters = n_cluster_choice)
    model = k_mean.fit(recommend_np)
    result = k_mean.labels_

    marker = ['x', 'o', 'v', '+', '.', '^', '<', '>']
    color = ['lightgreen', 'orange', 'lightblue', 'pink', 'indigo', 'cyan', 'blue', 'green']

    fig2 = plt.figure()
    for i in range(n_cluster_choice):
        plt.scatter(
            recommend_np[result == i, 1], recommend_np[result == i, -2],
            c=color[i],
            marker=marker[i], edgecolor='black',
            label='cluster ' + str(i+1)
        )

    plt.scatter(
        model.cluster_centers_[:, 1], model.cluster_centers_[:, -2],
        s=250, marker='*',
        c='red', edgecolor='black',
        label='centroids'
    )

    plt.legend(scatterpoints=1)
    fig2 = plt.grid()
    st.pyplot(fig2)

    df_titles['cluster'] = result

    def recommend(model, movie_type, release_year, age_certi, country, genre):
        arr = np.array([[movie_type, release_year, age_certi, country, genre]])
        pred = model.predict(arr)
        return df_titles[df_titles['cluster'] == pred[0]].sample(5)

    type_choice = st.selectbox(
        'B·∫°n th√≠ch phim (MOVIE) hay truy·ªÅn h√¨nh (SHOW)',
        ('MOVIE', 'SHOW'))

    age_choice = st.selectbox(
        'Nh√£n ph√¢n lo·∫°i phim m√† b·∫°n quan t√¢m',
        ('TV-PG', 'NONE', 'PG', 'G', 'PG-13', 'R', 'TV-G', 'TV-Y', 'TV-14', 'NC-17', 'TV-Y7', 'TV-MA'))

    country_text = st.text_input('Ch·ªçn n∆°i s·∫£n xu·∫•t phim:')
    genre_choice = st.text_input('Ch·ªçn th·ªÉ lo·∫°i phim')
    release_year_choice = st.text_input('Ch·ªçn nƒÉm s·∫£n xu·∫•t')

    if len(country_text) == 0 or len(release_year_choice) == 0 or len(genre_choice) == 0:
        pass
    else:
        type_choice = type_dict[type_choice.upper()]
        age_choice = age_dict[age_choice]
        country_text = countries_dict[country_text]
        genre_choice = genres_dict[genre_choice.lower()]

        st.markdown("##### Nh·ªØng b·ªô phim b·∫°n n√™n xem d·ª±a tr√™n l·ª±a ch·ªçn c·ªßa b·∫°n: ")
        result = recommend(model, type_choice, release_year_choice, age_choice, country_text, genre_choice)
        st.dataframe(result, use_container_width=True)
